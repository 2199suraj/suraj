							TypeScript

1. Write a TypeScript program that declares a variable name and assigns it a string value. Also declare a variable age and assign it a number value. Finally print the values of name and age.
-->

// Declare a variable name and assign it a string value
let name: string = "Alice";

// Declare a variable age and assign it a number value
let age: number = 25;

// Define an arrow function that prints the values of name and age
const printNameAndAge = (): void => {
    console.log(`Name: ${name}`);
    console.log(`Age: ${age}`);
};

// Call the arrow function to print the values of name and age
printNameAndAge();


let name: string = "Alice";
let age: number = 25;
console.log(`Name: ${name}`);
console.log(`Age: ${age}`);
---------------------------------------------------------------------------------------------------------------------------------------

2. Write a TypeScript program that declares variables using let, const, and var. Then, describe how each declaration type behaves with respect to scoping and mutability.
-->
// Arrow function to demonstrate variables using let, const, and var
const demonstrateVariables = (): void => {
    // Using 'let'
    console.log('--- let ---');
    let letVar = 10;
    console.log(`Initial letVar: ${letVar}`);
    {
        let letVar = 20; // New variable in block scope
        console.log(`Inside block letVar: ${letVar}`);
    }
    console.log(`Outside block letVar: ${letVar}`);
    
    // Using 'const'
    console.log('--- const ---');
    const constVar = 'Hello, TypeScript!';
    console.log(`constVar: ${constVar}`);
    // Uncommenting the next line will cause a compilation error because constVar is immutable
    // constVar = 'New Value';

    // Using 'var'
    console.log('--- var ---');
    var varVar = true;
    console.log(`Initial varVar: ${varVar}`);
    {
        var varVar = false; // Same variable, function scope
        console.log(`Inside block varVar: ${varVar}`);
    }
    console.log(`Outside block varVar: ${varVar}`);
};

// Execute the arrow function to demonstrate variables
demonstrateVariables();
_____________________________________________________________________________________________________________________________________

3.Write a TypeScript program that converts a variable of one type to another using type assertions and type conversion functions like parseInt().
-->
const demonstrateTypeConversions = (): void => {
// Using type assertion
let numStr: any = "10";
let num: number = <number>numStr; // Type assertion
console.log("Using type assertion:", num); // Output: 10

// Using parseInt() function
let strNum: string = "20";
let parsedNum: number = parseInt(strNum);
console.log("Converted string to number using parseInt():", parsedNum); // Output: 20
}

demonstrateTypeConversions();
______________________________________________________________________________________________________________________________________

4.Write a TypeScript program that defines an enumeration 'Color' with values 'Red', 'Green', 'White' and Blue. Create a variable 'selectedColor' of type 'Color' and assign it one of the enumeration values.
-->

// Define an enumeration called 'Color' with values 'Red', 'Green', 'White', and 'Blue'
enum Color {
    Red,
    Green,
    White,
    Blue
}

// Arrow function to demonstrate the usage of 'Color' enumeration
const demonstrateColor = (): void => {
    // Create a variable 'selectedColor' of type 'Color' and assign it one of the enumeration values
    const selectedColor: Color = Color.Green;
    
    // Print the selected color using the Color enumeration
    console.log(`The selected color is: ${Color[selectedColor]}`);
};

// Call the arrow function to demonstrate the usage of 'Color' enumeration
demonstrateColor();
_______________________________________________________________________________________________________________________________________

5. Write a TypeScript generic function that accepts two arguments: an array of any type and two indices. The function should swap the elements at the specified indices and return the modified array.
-->
// Generic arrow function to swap elements in an array
const swapElements = <T>(array: T[], index1: number, index2: number): T[] => {
    // Check that the indices are valid
    if (index1 < 0 || index1 >= array.length || index2 < 0 || index2 >= array.length) {
        throw new Error('Invalid indices');
    }

    // Swap the elements at the specified indices using destructuring assignment
    [array[index1], array[index2]] = [array[index2], array[index1]];

    // Return the modified array
    return array;
};

// Example usage of the swapElements arrow function
const demonstrateSwap = (): void => {
    const numbers = [1, 2, 3, 4, 5];
    console.log('Original array:', numbers);

    // Swap the elements at index 1 and index 3
    const modifiedArray = swapElements(numbers, 1, 3);
    console.log('Modified array:', modifiedArray);
};

// Call the function to demonstrate the swap of elements in the array
demonstrateSwap();
_______________________________________________________________________________________________________________________________________


6. Write a TypeScript class called Bus with the properties make, model, and year. Implement a constructor that initializes these properties when a Bus object is created.
-->
// Define a class called 'Bus' with properties make, model, and year
class Bus {
    // Declare properties of the Bus class
    make: string;
    model: string;
    year: number;

    // Constructor that initializes the properties when a Bus object is created
    constructor(make: string, model: string, year: number) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    // Method to display Bus information
    displayInfo = (): void => {
        console.log(`Bus Information:
        Make: ${this.make}
        Model: ${this.model}
        Year: ${this.year}`);
    };
}

// Example usage:
const myBus = new Bus('Mercedes-Benz', 'Sprinter', 2022);

// Display the information of the Bus object
myBus.displayInfo();
______________________________________________________________________________________________________________________________________


7. Write a TypeScript class that defines a base class Car with properties like make, model, and year, along with a start() method that prints a starting message. Now create a class called Engine with the properties horsepower and fuelType. Modify the Car class to include an instance of the Engine class as a property. Implement a method printCarDetails() in the Car class that prints both car and engine details.
-->

// Define the Engine class with properties horsepower and fuelType
class Engine {
    horsepower: number;
    fuelType: string;

    constructor(horsepower: number, fuelType: string) {
        this.horsepower = horsepower;
        this.fuelType = fuelType;
    }
}

// Define the base class Car with properties make, model, and year, and a start() method
class Car {
    make: string;
    model: string;
    year: number;
    engine: Engine; // Include an instance of the Engine class as a property

    // Constructor initializes properties including the engine instance
    constructor(make: string, model: string, year: number, engine: Engine) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.engine = engine;
    }

    // Arrow function to start the car and print a starting message
    start = (): void => {
        console.log(`${this.make} ${this.model} is starting...`);
    };

    // Arrow function to print both car and engine details
    printCarDetails = (): void => {
        console.log(`Car Details:
        Make: ${this.make}
        Model: ${this.model}
        Year: ${this.year}
        Engine Horsepower: ${this.engine.horsepower}
        Engine Fuel Type: ${this.engine.fuelType}`);
    };
}

// Example usage:
const myEngine = new Engine(300, 'Gasoline'); // Create an instance of the Engine class
const myCar = new Car('Toyota', 'Camry', 2022, myEngine); // Create an instance of the Car class with the engine

// Start the car and print its details
myCar.start();
myCar.printCarDetails();
______________________________________________________________________________________________________________________________________

8.Write a TypeScript module that exports a class called Student with properties name and age. Import the Student class in another TypeScript file, create instances of Student, and display their information.
-->

student.ts

// Export the Student class
export class Student {
    // Properties of the Student class
    name: string;
    age: number;

    // Constructor to initialize the properties
    constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
    }

    // Method to display student information
    displayInfo = (): void => {
        console.log(`Student Name: ${this.name}`);
        console.log(`Student Age: ${this.age}`);
    };
}


app.js
// Import the Student class from the 'student.ts' file
import { Student } from './student';

// Create instances of the Student class
const student1 = new Student('Alice', 20);
const student2 = new Student('Bob', 22);

// Display information for the students using the displayInfo() method
student1.displayInfo();
student2.displayInfo();

_____________________________________________________________________________________________________________________________________

9.Write a TypeScript module that exports multiple functions and variables using named exports. Import specific named exports in a separate TypeScript file and use them.
-->

untitald.ts

// Export a variable called 'greeting'
export const greeting: string = 'Hello, TypeScript!';

// Export a function called 'add' that takes two numbers and returns their sum
export const add = (a: number, b: number): number => a + b;

// Export a function called 'multiply' that takes two numbers and returns their product
export const multiply = (a: number, b: number): number => a * b;

// Export a function called 'sayHello' that prints the greeting message
export const sayHello = (): void => {
    console.log(greeting);
};


app.ts

// Import the named exports from the 'utilities.ts' file
import { greeting, add, multiply, sayHello } from './untitels';

// Use the imported variables and functions

// Print the greeting message using the imported 'greeting' variable
console.log(`Greeting message: ${greeting}`);

// Perform addition using the 'add' function and print the result
const sum = add(5, 3);
console.log(`Sum: ${sum}`);

// Perform multiplication using the 'multiply' function and print the result
const product = multiply(4, 6);
console.log(`Product: ${product}`);

// Call the 'sayHello' function to print the greeting message
sayHello();
_____________________________________________________________________________________________________________________________________

10. Write a TypeScript module that exports a default function or class. Import the default export into another TypeScript file and use it to perform a task or create an instance.main.ts
-->

greet.ts

// Define a default function that greets the user with a given name
const greet = (name: string): string => {
    return `Hello, ${name}!`;
};

// Export the function as the default export
export default greet;


main.ts

// Import the default export from 'greet.ts' and assign it to a variable
import greet from './greet';

// Use the imported default function to perform a task
const greetingMessage = greet('Alice');
console.log(greetingMessage); // Prints: "Hello, Alice!"
_______________________________________________________________________________________________________________________________________


14.Write a function print ShapeInfo(shape: Circle | Rectangle) that prints the area of the shape Use type narrowing to determine whether the shape is a Circle or Rectangle. Use type guards to safely access the properties specific to each shape type (take user input)
-->

// Define the Circle type
interface Circle {
    radius: number;
    type: 'circle';
}

// Define the Rectangle type
interface Rectangle {
    width: number;
    height: number;
    type: 'rectangle';
}

// Define a function to print the area of a shape (Circle or Rectangle)
const printShapeInfo = (shape: Circle | Rectangle): void => {
    if (shape.type === 'circle') {
        // The shape is a Circle, calculate the area using the formula πr²
        const area = Math.PI * shape.radius ** 2;
        console.log(`Circle Area: ${area.toFixed(2)}`);
    } else if (shape.type === 'rectangle') {
        // The shape is a Rectangle, calculate the area using the formula width * height
        const area = shape.width * shape.height;
        console.log(`Rectangle Area: ${area}`);
    }
};

// Example usage:
const circle: Circle = {
    radius: 5,
    type: 'circle',
};

const rectangle: Rectangle = {
    width: 4,
    height: 6,
    type: 'rectangle',
};

// Print the area of the shapes using the function
printShapeInfo(circle); // Should print the area of the circle
printShapeInfo(rectangle); // Should print the area of the rectangle
