1.Write a JavaScript program to check whether three given numbers are increasing in strict or in soft mode. [Note: Strict mode -> 10, 15, 31 : Soft mode -> 24, 22, 31 or 22, 22, 31. using ES6:Define a function named number_order using arrow function syntax with parameters x, y, and z.]
-->
// Define the arrow function `number_order` with parameters `x`, `y`, and `z`
const number_order = (x, y, z) => {
    // Check for strict mode: the numbers are in strictly increasing order (x < y < z)
    if (x < y && y < z) {
        return 'Strict mode';
    }

    // Check for soft mode: the numbers are in non-decreasing order (x <= y <= z)
    if (x <= y && y <= z) {
        return 'Soft mode';
    }

    // If neither strict nor soft mode, return 'Neither'
    return 'Neither';
};

// Example usage:
const x1 = 10, y1 = 15, z1 = 31; // Example of strict mode
const x2 = 24, y2 = 22, z2 = 31; // Example of soft mode
const x3 = 22, y3 = 22, z3 = 31; // Another example of soft mode
const x4 = 15, y4 = 10, z4 = 5;  // Example of neither

console.log(`Numbers (${x1}, ${y1}, ${z1}): ${number_order(x1, y1, z1)}`); // Strict mode
console.log(`Numbers (${x2}, ${y2}, ${z2}): ${number_order(x2, y2, z2)}`); // Soft mode
console.log(`Numbers (${x3}, ${y3}, ${z3}): ${number_order(x3, y3, z3)}`); // Soft mode
console.log(`Numbers (${x4}, ${y4}, ${z4}): ${number_order(x4, y4, z4)}`); // Neither
  -----------------------------------------------------------------------------------------------------------

2.passing a function inside template literals using arrow function print a variable is greater than or less than and print true or false.
-->

const compareNumbers = (a, b) => `${a} is ${a > b ? 'greater than' : a < b ? 'less than' : 'equal to'} ${b}. It is ${a > b || a < b ? 'true' : 'false'}.`;

console.log(compareNumbers(5, 10)); // Output: "5 is less than 10. It is true."
console.log(compareNumbers(15, 5)); // Output: "15 is greater than 5. It is true."
console.log(compareNumbers(10, 10)); // Output: "10 is equal to 10. It is false."


----------------------------------------------------------------------------------------------------------
3.Instead of manually enumerating all 52 card values, you can create a generator
function that computes all permutations of the different suits and numbers, yielding each one by one. Also show all 52 cards? ♠️.
-->

// Define an array of suits
const suits = ['♠️', '♥️', '♦️', '♣️'];

// Define an array of ranks (2 through 10 and face cards)
const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

// Define a generator function to compute all permutations of suits and ranks
function* generateDeck() {
    for (const suit of suits) {
        for (const rank of ranks) {
            // Yield each card as a string combining rank and suit
            yield `${rank}${suit}`;
        }
    }
}

// Function to demonstrate using the generator to display all 52 cards
const displayAllCards = () => {
    const deck = generateDeck(); // Create a deck generator

    console.log('All 52 cards in the deck:');
    
    // Iterate through the deck generator and display each card
    for (const card of deck) {
        console.log(card);
    }
};

// Call the function to display all 52 cards
displayAllCards();
---------------------------------------------------------------------------------------------------------------

4.Write a JavaScript program to build  an array, using an iterator function and an initial seed value.[Use a while loop and Array.prototype.push() to call the function repeatedly until it returns false. The iterator function accepts one argument (seed) and must always return an array with two elements ([value, nextSeed]) or false to terminate.]
-->

// Define an iterator function that accepts a seed and returns [value, nextSeed] or false to terminate
const iteratorFunction = (seed) => {
    // Example implementation:
    // If the seed value is less than 10, return [seed * 2, seed + 1]
    if (seed < 10) {
        const value = seed * 2;
        const nextSeed = seed + 1;
        return [value, nextSeed];
    }
    // If seed is 10 or more, return false to terminate
    return false;
};

// Define a function to build an array using an iterator function and an initial seed value
const buildArrayWithIterator = (iterator, initialSeed) => {
    const resultArray = [];
    let seed = initialSeed;

    // Use a while loop to repeatedly call the iterator function until it returns false
    while (true) {
        // Call the iterator function with the current seed
        const result = iterator(seed);

        // If the iterator function returns false, terminate the loop
        if (result === false) {
            break;
        }

        // Otherwise, push the value to the result array and update the seed
        const [value, nextSeed] = result;
        resultArray.push(value);
        seed = nextSeed;
    }

    return resultArray;
};

// Example usage:
const initialSeed = 1;
const result = buildArrayWithIterator(iteratorFunction, initialSeed);
console.log('Result array:', result);
  

------------------------------------------------------------------------------------------------------------------
5.Write a JavaScript program to convert a string to snake case also in KebabCase.[Note: Break the string into words and combine them adding _ as a separator, using a regex. Use String.prototype.match() to break the string into words using an appropriate regexp. Use Array.prototype.map(), Array.prototype.slice(), Array.prototype.join() and  String.prototype.toLowerCase() to combine them,adding_as a separator.
-->

const toSnakeCase = (str) => str.match(/[a-zA-Z0-9]+/g).map(w => w.toLowerCase()).join('_');

const toKebabCase = (str) => str.match(/[a-zA-Z0-9]+/g).map(w => w.toLowerCase()).join('-');

// Example usage
const inputString = "Convert This String To Snake Case";
console.log("Snake Case:", toSnakeCase(inputString)); // Output: convert_this_string_to_snake_case
console.log("Kebab Case:", toKebabCase(inputString)); // Output: convert-this-string-to-kebab-case

------------------------------------------------------------------------------------------------------------------------


6.Write a JavaScript program that implements a function that performs a series of asynchronous operations in sequence using Promises and 'async/await'.
-->

const asyncOperation = (operationNumber, delay) => {
  return new Promise(resolve => {
    setTimeout(() => {
      console.log(`Async operation ${operationNumber} completed`);
      resolve(operationNumber);
    }, delay);
  });
};

const performSequentialAsyncOperations = async () => {
  console.log("Starting sequential asynchronous operations...");
  
  const result1 = await asyncOperation(1, 2000);
  const result2 = await asyncOperation(2, 1500);
  const result3 = await asyncOperation(3, 1000);

  console.log("All sequential asynchronous operations completed successfully");
  return [result1, result2, result3];
};

performSequentialAsyncOperations()
  .then(results => console.log("Results:", results))
  .catch(error => console.error("Error occurred:", error));

-----------------------------------------------------------------------------------------------------------------------

7.Write a JavaScript program to perform left-to-right function composition for asynchronous functions.[Use Array.prototype.reduce() and the spread operator (...) to perform function composition using Promise.prototype.then().The functions can return a combination of normal values, Promises or be async, returning through await.All functions must accept a single argument.]
-->

const composeAsync = (...funcs) => arg => {
  return funcs.reduce(async (prevPromise, func) => {
    const result = await prevPromise;
    return func(result);
  }, Promise.resolve(arg));
};

// Example usage
const asyncAdd1 = async x => {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(x + 1);
    }, 1000);
  });
};

const asyncMultiplyBy2 = async x => {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(x * 2);
    }, 1000);
  });
};

const asyncSubtract3 = async x => {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(x - 3);
    }, 1000);
  });
};

const asyncOperations = composeAsync(asyncAdd1, asyncMultiplyBy2, asyncSubtract3);

// Start with initial value of 5
asyncOperations(5)
  .then(result => {
    console.log("Result:", result); // Output: Result: 7
  })
  .catch(error => {
    console.error("Error occurred:", error);
  });

--------------------------------------------------------------------------------------------------------------

8.Write a JavaScript program to convert an asynchronous function to return a promise.[Use currying to return a function returning a Promise that calls the original function. Use the rest operator (...) to pass in all the parameters.]
-->

const convertToPromise = asyncFunc => (...args) => asyncFunc(...args);
const asyncAdd = async (a, b) => {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(a + b);
    }, 1000);
  });
};

// Convert asynchronous function to return a promise
const promisedAdd = convertToPromise(asyncAdd);
promisedAdd(5, 10)
  .then(result => console.log("Result:", result)) // Output: Result: 15
  .catch(error => console.error("Error occurred:", error));

---------------------------------------------------------------------------------------------------------------

Q9.Write a JavaScript program to check whether the given argument is a symbol.[Use typeof to check if a value is classified as a symbol primitive.]
-->

const isSymbol = (value) => {
  return typeof value === 'symbol';
};
const symbolValue = Symbol("example");
const stringValue = "example";

console.log(isSymbol(symbolValue)); // Output: true
console.log(isSymbol(stringValue)); // Output: false

----------------------------------------------------------------------------------------------------------------
10.create a web page using html and css which have div class="results" with two vehicle type in form which have radio button for car and truck also create button using onclick="processData(this.form)", create another div whose class="resultText'' and p tag whose id="result" using this id print a text when click on submit. In script tag we have three class vehicle whose child class are car and truck.This three have run() methods and also have function processData(form).expect output:
-->

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Vehicle Type</title>
<style>
    .results {
        margin: 20px;
        padding: 20px;
        border: 1px solid #ccc;
    }
    .resultText {
        margin-top: 20px;
    }
</style>
</head>
<body>
    <div class="results">
        <form>
            <label>
                <input type="radio" name="vehicleType" value="car" checked> Car
            </label>
            <label>
                <input type="radio" name="vehicleType" value="truck"> Truck
            </label>
            <br><br>
            <button onclick="processData(this.form)">Submit</button>
        </form>
    </div>
    <div class="resultText">
        <p id="result"></p>
    </div>

    <script>
        class Vehicle {
            run() {
                return "Vehicle is running.";
            }
        }

        class Car extends Vehicle {
            run() {
                return "Car is running.";
            }
        }

        class Truck extends Vehicle {
            run() {
                return "Truck is running.";
            }
        }

        function processData(form) {
            const vehicleType = form.querySelector('input[name="vehicleType"]:checked').value;
            let vehicle;

            if (vehicleType === "car") {
                vehicle = new Car();
            } else if (vehicleType === "truck") {
                vehicle = new Truck();
            }

            const resultElement = document.getElementById("result");
            resultElement.textContent = vehicle.run();
        }
    </script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------
11.Write a JavaScript program to iterate over a callback n times.[Use Function.prototype.call() to call fn n times or until it returns false.Omit the last argument, context, to use an undefined object (or the global object in non-strict mode).]
-->

const iterateNTimes = (fn, n) => {
  for (let i = 0; i < n; i++) {
    if (fn.call() === false) {
      break;
    }
  }
};

// Example usage
const callback = () => {
  console.log("Callback function called");
};

iterateNTimes(callback, 5);

---------------------------------------------------------------------------------------------------------------------

12.Write a JavaScript program to split a multiline string into an array of lines.[Use String.prototype.split() and a regular expression to match line breaks and create an array.]
-->

const splitMultilineString = (multilineString) => {
  return multilineString.split(/\r?\n/);
};

// Example usage
const multilineString = `Line 1
Line 2
Line 3`;

const linesArray = splitMultilineString(multilineString);
console.log(linesArray);


-----------------------------------------------------------------------------------------------------------------
13.Write a JavaScript program that takes a function as an argument, then makes the first argument the last.[Use argument destructuring and a closure with variadic arguments.Splice the first argument, using the spread operator (...), to make it the last before applying the rest.]
-->
const rearrangeArguments = (func) => {
  return (...args) => {
    const [firstArg, ...restArgs] = args;
    return func(...restArgs, firstArg);
  };
};

// Example usage
const originalFunction = (a, b, c) => {
  console.log(a, b, c);
};

const modifiedFunction = rearrangeArguments(originalFunction);
modifiedFunction(1, 2, 3); // Output: 2 3 1

------------------------------------------------------------------------------------------------------------------

14.Write a JavaScript program that takes a function as an argument, then makes the first argument the last.[Use argument destructuring and a closure with variadic arguments.Splice the first argument, using the spread operator (...), to make it the last before applying the rest.]
-->

const rearrangeArguments = (func) => {
  return (...args) => {
    const [firstArg, ...restArgs] = args;
    return func(...restArgs, firstArg);
  };
};

// Example usage
const originalFunction = (a, b, c) => {
  console.log(a, b, c);
};

const modifiedFunction = rearrangeArguments(originalFunction);
modifiedFunction(1, 2, 3); // Output: 2 3 1

--------------------------------------------------------------------------------------------------------------------------


15.Write a JavaScript program that creates a class called "BankAccount" with properties for account number and balance.Include methods to deposit and withdraw money from the account. Create some instances of the "BankAccount" class, deposit some money, and withdraw a portion of it.
create a module with the name main.js and create/define a three functions 
-->

class BankAccount {
  constructor(accountNumber, balance) {
    this.accountNumber = accountNumber;
    this.balance = balance;
  }

  deposit(amount) {
    this.balance += amount;
    console.log(`Deposited $${amount}. New balance: $${this.balance}`);
  }

  withdraw(amount) {
    if (amount > this.balance) {
      console.log("Insufficient funds");
    } else {
      this.balance -= amount;
      console.log(`Withdrawn $${amount}. New balance: $${this.balance}`);
    }
  }
}

// Create instances of BankAccount class
const account1 = new BankAccount("123456789", 1000);
const account2 = new BankAccount("987654321", 500);

// Deposit and withdraw money
account1.deposit(500);
account1.withdraw(200);

account2.deposit(100);
account2.withdraw(600);
class BankAccount {
  constructor(accountNumber, balance) {
    this.accountNumber = accountNumber;
    this.balance = balance;
  }

  deposit(amount) {
    this.balance += amount;
    console.log(`Deposited $${amount}. New balance: $${this.balance}`);
  }

  withdraw(amount) {
    if (amount > this.balance) {
      console.log("Insufficient funds");
    } else {
      this.balance -= amount;
      console.log(`Withdrawn $${amount}. New balance: $${this.balance}`);
    }
  }
}

// Create instances of BankAccount class
const account1 = new BankAccount("123456789", 1000);
const account2 = new BankAccount("987654321", 500);

// Deposit and withdraw money
account1.deposit(500);
account1.withdraw(200);

account2.deposit(100);
account2.withdraw(600);

----------------------------------------------------------------------------------------------------------------------

16.create a module with the name main.js and create/define a three functions getPower(), capitalize(), roundToDecimalPlace() and export two function {capitalize,roundToDecimalPlace} and import it from main.js in displayTotal.js and here create displayTotal() function and export it in displayTotal.js file
-->

// main.js module
const getPower = (base, exponent) => {
  return Math.pow(base, exponent);
};
const capitalize = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
const roundToDecimalPlace = (num, decimalPlaces) => {
  return Number(num.toFixed(decimalPlaces));
};
module.exports = { capitalize, roundToDecimalPlace };


// displayTotal.js module

const { capitalize, roundToDecimalPlace } = require('./main.js');
const displayTotal = (total) => {
  const capitalizedTotal = capitalize(total: $${total});
  const roundedTotal = roundToDecimalPlace(total, 2);
  console.log(${capitalizedTotal}, rounded to 2 decimal places: ${roundedTotal});
};

module.exports = displayTotal;


